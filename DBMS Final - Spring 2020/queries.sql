--Landon Higinbotham
--LCH43
--CS1555

-- 1. createUser
INSERT INTO USER_ACCOUNT (USER_ID, USERNAME, PASSKEY, ROLE_ID, LAST_LOGIN) VALUES (USER_ID_SEQ.NEXTVAL, 'LandonH', 'GUEST', 3,'25-Apr-2020');
COMMIT;
-- 2. dropUser
DELETE FROM USER_ACCOUNT WHERE USER_ID=84;
COMMIT;
-- 3. createEvent
INSERT INTO EVENT (EVENT_ID, SPORT_ID, VENUE_ID, GENDER, EVENT_TIME) VALUES (EVENT_ID_SEQ.NEXTVAL,3,7,'M','27-Jul-2012');
COMMIT;
-- 4. addEventOutcome
INSERT INTO SCOREBOARD (OLYMPIC_ID, EVENT_ID, TEAM_ID, PARTICIPANT_ID, POSITION, MEDAL_ID) VALUES (2,10,22,1,1,0);
COMMIT;
-- 5. createTeam
INSERT INTO TEAM (TEAM_ID, OLYMPIC_ID, TEAM_NAME, COUNTRY_ID, SPORT_ID, COACH_ID)
SELECT TEAM_ID_SEQ.NEXTVAL, O.OLYMPIC_ID, 'China Table Tennis Singles Men - Zen', 1, 4, 65
FROM (SELECT * FROM OLYMPICS WHERE OPENING_DATE>=TO_DATE('2008-01-01', 'YYYY-MM-DD') AND OPENING_DATE<=TO_DATE('2008-12-31', 'YYYY-MM-DD') AND HOST_CITY='Beijing') O;
COMMIT;
-- 6. registerTeam
INSERT INTO EVENT_PARTICIPATION (EVENT_ID, TEAM_ID, STATUS) VALUES (10,28,'e');
COMMIT;
-- 7. addParticipant
INSERT INTO PARTICIPANT (PARTICIPANT_ID, FNAME, LNAME, NATIONALITY, BIRTH_PLACE, DOB) VALUES (PARTICIPANT_ID_SEQ.NEXTVAL,'Lien','Zen','China','China',TO_DATE('1985-03-20', 'YYYY-MM-DD'));
COMMIT;
-- 8. addTeamMember
INSERT INTO TEAM_MEMBER (TEAM_ID, PARTICIPANT_ID) VALUES (28,80);
COMMIT;
-- 9. dropTeamMember
DELETE FROM PARTICIPANT WHERE PARTICIPANT_ID=80;
COMMIT;
-- 10. login
SELECT * FROM USER_ACCOUNT WHERE USERNAME='Long Ma' AND PASSKEY='GUEST';
-- 11. displaySport
SELECT SPORT_ID, SPORT_NAME, DESCRIPTION, DOB AS SPORT_DOB FROM SPORT WHERE SPORT_NAME='Basketball';

SELECT EVENT_ID, EVENT_TIME, GENDER, FNAME, LNAME, NATIONALITY, MEDAL_ID
FROM PARTICIPANT P JOIN (SELECT SC.EVENT_ID, EVENT_TIME, GENDER, PARTICIPANT_ID, MEDAL_ID FROM SCOREBOARD SC JOIN (SELECT EVENT_ID, EVENT_TIME, GENDER, E.SPORT_ID FROM EVENT E JOIN (SELECT SPORT_ID FROM SPORT WHERE SPORT_NAME='Basketball') SP ON E.SPORT_ID = SP.SPORT_ID) S ON SC.EVENT_ID = S.EVENT_ID) S ON P.PARTICIPANT_ID = S.PARTICIPANT_ID
WHERE MEDAL_ID > 0
ORDER BY EVENT_TIME ASC, MEDAL_ID ASC
;
-- 12. displayEvent
SELECT OLYMPIC_NUM, EVENT_ID, FNAME, LNAME, POSITION, MEDAL_ID
FROM PARTICIPANT P JOIN (SELECT OLYMPIC_NUM, EVENT_ID, PARTICIPANT_ID, POSITION, MEDAL_ID FROM OLYMPICS O JOIN 
(
SELECT O.OLYMPIC_ID, EVENT_ID, PARTICIPANT_ID, POSITION, MEDAL_ID FROM SCOREBOARD S JOIN (
SELECT OLYMPIC_ID FROM OLYMPICS WHERE OPENING_DATE>=TO_DATE('2016-01-01', 'YYYY-MM-DD') AND OPENING_DATE<=TO_DATE('2016-12-31', 'YYYY-MM-DD') AND HOST_CITY='Rio'
) O ON S.OLYMPIC_ID = O.OLYMPIC_ID
WHERE EVENT_ID = 3
) E ON O.OLYMPIC_ID = E.OLYMPIC_ID) S ON P.PARTICIPANT_ID = S.PARTICIPANT_ID
ORDER BY POSITION ASC
;
-- 13. countryRanking
SELECT STARTED, COUNTRY, GOLD, SILVER, BRONZE, POINTS
FROM COUNTRY C JOIN
(
SELECT STARTED, S.COUNTRY_ID, GOLD, SILVER, BRONZE, POINTS
FROM 
(
SELECT MIN(OPENING_DATE) AS STARTED, COUNTRY_ID
FROM TEAM T JOIN
(
SELECT OPENING_DATE, TEAM_ID
FROM OLYMPICS O JOIN SCOREBOARD S ON O.OLYMPIC_ID = S.OLYMPIC_ID
) S ON T.TEAM_ID = S.TEAM_ID
GROUP BY COUNTRY_ID
)
O JOIN
(
SELECT COUNTRY_ID, SUM(GOLD) AS GOLD, SUM(SILVER) AS SILVER, SUM(BRONZE) AS BRONZE, SUM(POINTS) AS POINTS
FROM TEAM T JOIN
(
SELECT TEAM_ID, SUM(CASE WHEN M.MEDAL_ID=1 THEN 1 ELSE 0 END) AS GOLD ,SUM(CASE WHEN M.MEDAL_ID=2 THEN 1 ELSE 0 END) AS SILVER ,SUM(CASE WHEN M.MEDAL_ID=3 THEN 1 ELSE 0 END) AS BRONZE, SUM(POINTS) AS POINTS
FROM SCOREBOARD S JOIN MEDAL M ON S.MEDAL_ID = M.MEDAL_ID
WHERE OLYMPIC_ID = 1
GROUP BY TEAM_ID
) S ON T.TEAM_ID = S.TEAM_ID
GROUP BY COUNTRY_ID, OLYMPIC_ID
) S ON O.COUNTRY_ID = S.COUNTRY_ID
GROUP BY S.COUNTRY_ID, STARTED, GOLD, SILVER, BRONZE, POINTS
ORDER BY POINTS DESC
) S ON C.COUNTRY_ID = S.COUNTRY_ID
;
-- 14. topkAthletes
SELECT *
FROM
(
SELECT FNAME, LNAME, SUM(CASE WHEN MEDAL_ID=1 THEN 1 ELSE 0 END) AS GOLD ,SUM(CASE WHEN MEDAL_ID=2 THEN 1 ELSE 0 END) AS SILVER ,SUM(CASE WHEN MEDAL_ID=3 THEN 1 ELSE 0 END) AS BRONZE, SUM(POINTS) AS POINTS
FROM PARTICIPANT P JOIN
(
SELECT PARTICIPANT_ID, S.MEDAL_ID, POINTS
FROM MEDAL M JOIN
(
SELECT PARTICIPANT_ID, MEDAL_ID
FROM SCOREBOARD
WHERE OLYMPIC_ID = 1
) S ON M.MEDAL_ID = S.MEDAL_ID
) S ON P.PARTICIPANT_ID = S.PARTICIPANT_ID
GROUP BY FNAME, LNAME
ORDER BY POINTS DESC, LNAME ASC
)
WHERE ROWNUM <= 20
;
-- 15. connectedAthletes

-- 16. logout
-- Implemented by resetting authentication credentials in java.
-- 17. exit
-- Implemented by closing the connection to the DB safely.