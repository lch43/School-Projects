--Landon Higinbotham
--LCH43
--CS1555

/*Stores the credentials for each user registered in the system.*/

DROP TABLE USER_ACCOUNT CASCADE CONSTRAINTS;
CREATE TABLE USER_ACCOUNT
(
    USER_ID INTEGER PRIMARY KEY,
	USERNAME VARCHAR2(20) NOT NULL,
	PASSKEY VARCHAR2(20) NOT NULL,
    ROLE_ID INTEGER NOT NULL, --Added FK at bottom
    LAST_LOGIN DATE NOT NULL,
    CONSTRAINT USER_ACCOUNT_UNIQUE_USERNAME UNIQUE (USERNAME)
);
COMMIT;

/*Stores the roles as an enumeration. The roles are Organizer, Coach and Guest (The password
for the guest user is GUEST).*/

DROP TABLE USER_ROLE CASCADE CONSTRAINTS;
CREATE TABLE USER_ROLE
(
    ROLE_ID INTEGER PRIMARY KEY,
    ROLE_NAME VARCHAR2(20) NOT NULL,
    CONSTRAINT USER_ROLE_ROLE_NAME_INTEGRITY CHECK (ROLE_NAME IN ('Organizer','Coach', 'Guest'))
);
COMMIT;

/*Stores each Olympics Game along with its information, where olympic num is the unique number
for the Olympic games (e.g., V, VI, VII, etc).
*/

DROP TABLE OLYMPICS CASCADE CONSTRAINTS;
CREATE TABLE OLYMPICS
(
    OLYMPIC_ID INTEGER PRIMARY KEY,
    OLYMPIC_NUM VARCHAR2(30) UNIQUE  NOT NULL,
    HOST_CITY VARCHAR2(30)  NOT NULL,
    OPENING_DATE DATE UNIQUE  NOT NULL, --Unique since there should only be one olympics at a time.
    CLOSING_DATE DATE UNIQUE, --Unique since there should only be one olympics at a time.
    OFFICIAL_WEBSITE VARCHAR(50) NOT NULL
);
COMMIT;

/*Stores the information for each sport, where dob records the year it became an Olympic sport.
The team size could be 1 for an atomic sport or more than 1 for team sports (e.g., 5 for basketball,
11 for soccer and 4 for 4x4 relay).
*/

DROP TABLE SPORT CASCADE CONSTRAINTS;
CREATE TABLE SPORT
(
    SPORT_ID INTEGER PRIMARY KEY,
    SPORT_NAME VARCHAR2(30) NOT NULL,
    DESCRIPTION VARCHAR2(80),
    DOB DATE  NOT NULL,
    TEAM_SIZE INTEGER NOT NULL,
    CONSTRAINT SPORT_TEAM_SIZE_INTEGRITY CHECK (TEAM_SIZE > 0)
);
COMMIT;

/*Stores participants in the olympics (i.e., athletes and coaches) along with their information.*/

DROP TABLE PARTICIPANT CASCADE CONSTRAINTS;
CREATE TABLE PARTICIPANT
(
    PARTICIPANT_ID INTEGER PRIMARY KEY,
    FNAME VARCHAR2(30) NOT NULL,
    LNAME VARCHAR2(30) NOT NULL,
    NATIONALITY VARCHAR2(20) NOT NULL,
    BIRTH_PLACE VARCHAR2(40) NOT NULL,
    DOB DATE NOT NULL
);
COMMIT;

/*Stores the countries as an enumeration*/

DROP TABLE COUNTRY CASCADE CONSTRAINTS;
CREATE TABLE COUNTRY
(
    COUNTRY_ID INTEGER PRIMARY KEY,
    COUNTRY VARCHAR2(20) NOT NULL,
    COUNTRY_CODE VARCHAR2(20) NOT NULL,
    CONSTRAINT COUNTRY_UNIQUE_COUNTRY UNIQUE (COUNTRY),
    CONSTRAINT COUNTRY_UNIQUE_COUNTRY_CODE UNIQUE (COUNTRY_CODE)
);
COMMIT;

/*Stores the information of each team with the Olympics game during which they were contributing.
Also, the sport and the coach of the team. A team can not exist without a coach.*/

DROP TABLE TEAM CASCADE CONSTRAINTS;
CREATE TABLE TEAM
(
    TEAM_ID INTEGER PRIMARY KEY,
    OLYMPIC_ID INTEGER NOT NULL, --Added FK at bottom
    TEAM_NAME VARCHAR2(50) NOT NULL,
    COUNTRY_ID INTEGER NOT NULL, --Added FK at bottom
    SPORT_ID INTEGER NOT NULL, --Added FK at bottom
    COACH_ID INTEGER NOT NULL --Added FK at bottom
);
COMMIT;
/*Stores each athlete with their team.*/

DROP TABLE TEAM_MEMBER CASCADE CONSTRAINTS;
CREATE TABLE  TEAM_MEMBER
(
    TEAM_ID INTEGER NOT NULL, --Added FK at bottom
    PARTICIPANT_ID INTEGER NOT NULL, --Added FK at bottom
    CONSTRAINT TEAM_MEMBER_PK PRIMARY KEY (TEAM_ID, PARTICIPANT_ID)
);
COMMIT;

/*Stores the medals (gold, silver, bronze) as an enumeration.*/

DROP TABLE MEDAL CASCADE CONSTRAINTS;
CREATE TABLE MEDAL
(
    MEDAL_ID INTEGER PRIMARY KEY,
    MEDAL_TITLE VARCHAR2(6) NOT NULL,
    POINTS INTEGER NOT NULL
);
COMMIT;

/*Stores the standings of the athletes in particular events along with the earned medal in case any
were earned. The position is the order of finishing at the event.
*/

DROP TABLE SCOREBOARD CASCADE CONSTRAINTS;
CREATE TABLE SCOREBOARD
(
    OLYMPIC_ID INTEGER NOT NULL, --Added FK at bottom
    EVENT_ID INTEGER NOT NULL, --Added FK at bottom
    TEAM_ID INTEGER NOT NULL, --Added FK at bottom
    PARTICIPANT_ID INTEGER NOT NULL, --Added FK at bottom
    POSITION INTEGER NOT NULL,
    MEDAL_ID INTEGER, --Added FK at bottom
    CONSTRAINT SCOREBOARD_PK PRIMARY KEY (OLYMPIC_ID, EVENT_ID, PARTICIPANT_ID)
);
COMMIT;

/*Stores the information of venues at which the games will take place with their maximum events
capacity. We assume that a venue is used in only one Olympic game.*/

DROP TABLE VENUE CASCADE CONSTRAINTS;
CREATE TABLE VENUE
(
    VENUE_ID INTEGER PRIMARY KEY,
    OLYMPIC_ID INTEGER NOT NULL, --Added FK at bottom
    VENUE_NAME VARCHAR2(30) NOT NULL,
    CAPACITY INTEGER NOT NULL,
    CONSTRAINT VENUE_CAPACITY_INTEGRITY CHECK (CAPACITY > 0)
);
COMMIT;

/*Stores each event with its information, where gender declares whether it is a men�s or woman�s
event.*/

DROP TABLE EVENT CASCADE CONSTRAINTS;
CREATE TABLE EVENT
(
    EVENT_ID INTEGER PRIMARY KEY,
    SPORT_ID INTEGER NOT NULL, --Added FK at bottom
    VENUE_ID INTEGER NOT NULL, --Added FK at bottom
    GENDER CHAR NOT NULL,
    EVENT_TIME DATE NOT NULL,
    CONSTRAINT EVENT_GENDER_INTEGRITY CHECK (GENDER IN ('M','F'))
);
COMMIT;

/*Stores the teams competing to an event. The status is eligible (e) or not eligible (n)*/

DROP TABLE EVENT_PARTICIPATION CASCADE CONSTRAINTS;
CREATE TABLE EVENT_PARTICIPATION
(
    EVENT_ID INTEGER, --Added FK at bottom
    TEAM_ID INTEGER, --Added FK at bottom
    STATUS CHAR NOT NULL,
    CONSTRAINT E_P_STATUS_INTEGRITY CHECK (STATUS IN ('e','n')),
    CONSTRAINT E_P_PK PRIMARY KEY (EVENT_ID, TEAM_ID)
);
COMMIT;


ALTER TABLE USER_ACCOUNT ADD CONSTRAINT USER_ACCOUNT_FK_ROLE FOREIGN KEY(ROLE_ID) REFERENCES USER_ROLE(ROLE_ID);

ALTER TABLE TEAM ADD CONSTRAINT TEAM_FK_OLYMPIC_ID FOREIGN KEY(OLYMPIC_ID) REFERENCES OLYMPICS(OLYMPIC_ID);
ALTER TABLE TEAM ADD CONSTRAINT TEAM_FK_COUNTRY_ID FOREIGN KEY(COUNTRY_ID) REFERENCES COUNTRY(COUNTRY_ID);
ALTER TABLE TEAM ADD CONSTRAINT TEAM_FK_SPORT_ID FOREIGN KEY(SPORT_ID) REFERENCES SPORT(SPORT_ID);
ALTER TABLE TEAM ADD CONSTRAINT TEAM_FK_COACH_ID FOREIGN KEY(COACH_ID) REFERENCES USER_ACCOUNT(USER_ID);

ALTER TABLE TEAM_MEMBER ADD CONSTRAINT TEAM_MEMBER_FK_TEAM_ID FOREIGN KEY(TEAM_ID) REFERENCES TEAM(TEAM_ID) ON DELETE CASCADE;
ALTER TABLE TEAM_MEMBER ADD CONSTRAINT TEAM_MEMBER_FK_PARTICIPANT_ID FOREIGN KEY(PARTICIPANT_ID) REFERENCES PARTICIPANT(PARTICIPANT_ID);

ALTER TABLE PARTICIPANT ADD CONSTRAINT P_FK_NATION FOREIGN KEY(NATIONALITY) REFERENCES COUNTRY(COUNTRY);

ALTER TABLE SCOREBOARD ADD CONSTRAINT SB_FK_OLYMPIC_ID FOREIGN KEY(OLYMPIC_ID) REFERENCES OLYMPICS(OLYMPIC_ID);
ALTER TABLE SCOREBOARD ADD CONSTRAINT SB_FK_TEAM_ID FOREIGN KEY(TEAM_ID) REFERENCES TEAM(TEAM_ID) ON DELETE CASCADE;
ALTER TABLE SCOREBOARD ADD CONSTRAINT SB_FK_EVENT_ID FOREIGN KEY(EVENT_ID) REFERENCES EVENT(EVENT_ID);
ALTER TABLE SCOREBOARD ADD CONSTRAINT SB_FK_PARTCIPANT_ID FOREIGN KEY(PARTICIPANT_ID) REFERENCES PARTICIPANT(PARTICIPANT_ID);
ALTER TABLE SCOREBOARD ADD CONSTRAINT SB_FK_MEDAL_ID FOREIGN KEY(MEDAL_ID) REFERENCES MEDAL(MEDAL_ID);

ALTER TABLE VENUE ADD CONSTRAINT VENUE_FK_OLYMPIC_ID FOREIGN KEY(OLYMPIC_ID) REFERENCES OLYMPICS(OLYMPIC_ID);

ALTER TABLE EVENT ADD CONSTRAINT EVENT_FK_SPORT_ID FOREIGN KEY(SPORT_ID) REFERENCES SPORT(SPORT_ID);
ALTER TABLE EVENT ADD CONSTRAINT EVENT_FK_VENUE_ID FOREIGN KEY(VENUE_ID) REFERENCES VENUE(VENUE_ID);

ALTER TABLE EVENT_PARTICIPATION ADD CONSTRAINT E_P_FK_EVENT_ID FOREIGN KEY(EVENT_ID) REFERENCES EVENT(EVENT_ID);
ALTER TABLE EVENT_PARTICIPATION ADD CONSTRAINT E_P_FK_TEAM_ID FOREIGN KEY(TEAM_ID) REFERENCES TEAM(TEAM_ID) ON DELETE CASCADE;
COMMIT;
